// Generated by view binder compiler. Do not edit!
package fiap.com.br.fiapchallange.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.EditText;
import android.widget.RelativeLayout;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.pchmn.materialchips.ChipsInput;
import fiap.com.br.fiapchallange.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class ContentMainBinding implements ViewBinding {
  @NonNull
  private final RelativeLayout rootView;

  @NonNull
  public final ChipsInput ciContacts;

  @NonNull
  public final EditText etMessage;

  @NonNull
  public final EditText etSubject;

  @NonNull
  public final TextView tvTo;

  @NonNull
  public final View vwDivider1;

  @NonNull
  public final View vwDivider2;

  private ContentMainBinding(@NonNull RelativeLayout rootView, @NonNull ChipsInput ciContacts,
      @NonNull EditText etMessage, @NonNull EditText etSubject, @NonNull TextView tvTo,
      @NonNull View vwDivider1, @NonNull View vwDivider2) {
    this.rootView = rootView;
    this.ciContacts = ciContacts;
    this.etMessage = etMessage;
    this.etSubject = etSubject;
    this.tvTo = tvTo;
    this.vwDivider1 = vwDivider1;
    this.vwDivider2 = vwDivider2;
  }

  @Override
  @NonNull
  public RelativeLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static ContentMainBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static ContentMainBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.content_main, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static ContentMainBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.ci_contacts;
      ChipsInput ciContacts = ViewBindings.findChildViewById(rootView, id);
      if (ciContacts == null) {
        break missingId;
      }

      id = R.id.et_message;
      EditText etMessage = ViewBindings.findChildViewById(rootView, id);
      if (etMessage == null) {
        break missingId;
      }

      id = R.id.et_subject;
      EditText etSubject = ViewBindings.findChildViewById(rootView, id);
      if (etSubject == null) {
        break missingId;
      }

      id = R.id.tv_to;
      TextView tvTo = ViewBindings.findChildViewById(rootView, id);
      if (tvTo == null) {
        break missingId;
      }

      id = R.id.vw_divider_1;
      View vwDivider1 = ViewBindings.findChildViewById(rootView, id);
      if (vwDivider1 == null) {
        break missingId;
      }

      id = R.id.vw_divider_2;
      View vwDivider2 = ViewBindings.findChildViewById(rootView, id);
      if (vwDivider2 == null) {
        break missingId;
      }

      return new ContentMainBinding((RelativeLayout) rootView, ciContacts, etMessage, etSubject,
          tvTo, vwDivider1, vwDivider2);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
